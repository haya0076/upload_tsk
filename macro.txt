Option Explicit

Type tStack

    outPutRow As Long
    crrFncName As String
    sqlCnt As Long 'Execute

End Type


Type tIndexedtext

    index As String
    line As String
    fileName As String

End Type


Function fGetColorCode(inptColor As String) As String

Dim sRslt As String


Select Case UCase(inptColor)

Case "RED"

    sRslt = -16776961

Case "BLUE"

    sRslt = -4165632

Case "WBLUE"

    sRslt = -1003520

Case Else

    Stop

End Select

fGetColorCode = sRslt

End Function





Sub Uev_Split_Src_ShtMain()

cPrm_Split_Src "SRC_MAIN", "MAIN"

End Sub


Sub Uev_Split_Src_ShtLBLDEF()

cPrm_Split_Src "SRC_LBL(DEF)", "LBL(DEF)"

End Sub



Sub Uev_Apply_LBL()

    cPrm_Apply_LBL "LBL(DEF)", "MAIN", "LBL(DEF)"

End Sub


Sub Uev_Apply_LBLTmp()

    cPrm_Apply_LBL "Sheet2", "MAIN", "LBL(DEF)"

End Sub

Sub cPrm_Split_Src(inptFrmSht As String, inptDstSht As String)

'SRC => FILE, CODE, COUT, FNC

Dim sFrmShtName As String: sFrmShtName = inptFrmSht
Dim sDstShtName As String: sDstShtName = inptDstSht

'sFrmShtName = fPg_K2V_PG_CHK(sFrmShtName, True)
'sDstShtName = fPg_K2V_PG_CHK(sDstShtName, True)

If isSheetName_TB(sFrmShtName) = False Then Stop
If isSheetName_TB(sDstShtName) = False Then Stop

If fPg_searchField_TB("SRC", sFrmShtName) = 0 Then Stop

Msq_Split_Src inptFrmSht:=sFrmShtName, _
                inptDstSht:=sDstShtName
                

End Sub


Sub cPrm_Apply_LBL(inptFrmSht As String, inptDstSht As String, inptLbl As String)

'Apply Label (Match row)

Dim sFrmShtName As String: sFrmShtName = inptFrmSht
Dim sDstShtName As String: sDstShtName = inptDstSht
Dim sLbl As String: sLbl = inptLbl

'sFrmShtName = fPg_K2V_PG_CHK(sFrmShtName, True)
'sDstShtName = fPg_K2V_PG_CHK(sDstShtName, True)

If isSheetName_TB(sFrmShtName) = False Then Stop
If isSheetName_TB(sDstShtName) = False Then Stop

If fPg_searchField_TB("FILE", sFrmShtName) = 0 Then Stop
If fPg_searchField_TB("FILE", sDstShtName) = 0 Then Stop
If fPg_searchField_TB(sLbl, sFrmShtName) = 0 Then Stop
If fPg_searchField_TB(sLbl, sDstShtName) = 0 Then Stop


Msq_Apply_LBL inptFrmSht:=sFrmShtName, _
                inptDstSht:=sDstShtName, _
                inptLbl:=sLbl, _
                inptFrmCol_File:=fPg_searchField_TB("FILE", sFrmShtName), _
                inptFrmCol_Lbl:=fPg_searchField_TB(sLbl, sFrmShtName), _
                inptDstCol_File:=fPg_searchField_TB("FILE", sDstShtName), _
                inptDstCol_Lbl:=fPg_searchField_TB(sLbl, sDstShtName)

End Sub


Sub cK2V_Apply_LBL(inptFrmSht As String, inptDstSht As String, inptLbl As String)

'Apply Label (Match row)

Dim sFrmShtName As String: sFrmShtName = inptFrmSht
Dim sDstShtName As String: sDstShtName = inptDstSht
Dim sLbl As String: sLbl = inptLbl

sFrmShtName = fPg_K2V_PG_CHK(sFrmShtName, True)
sDstShtName = fPg_K2V_PG_CHK(sDstShtName, True)

If fPg_searchField_TB("FILE", sFrmShtName) = 0 Then Stop
If fPg_searchField_TB("FILE", sDstShtName) = 0 Then Stop
If fPg_searchField_TB(sLbl, sFrmShtName) = 0 Then Stop
If fPg_searchField_TB(sLbl, sDstShtName) = 0 Then Stop


Msq_Apply_LBL inptFrmSht:=sFrmShtName, _
                inptDstSht:=sDstShtName, _
                inptLbl:=sLbl, _
                inptFrmCol_File:=fPg_searchField_TB("FILE", sFrmShtName), _
                inptFrmCol_Lbl:=fPg_searchField_TB(sLbl, sFrmShtName), _
                inptDstCol_File:=fPg_searchField_TB("FILE", sDstShtName), _
                inptDstCol_Lbl:=fPg_searchField_TB(sLbl, sDstShtName)

End Sub


Sub Msq_Apply_LBL(inptFrmSht As String, _
                    inptDstSht As String, _
                    inptLbl As String, _
                    inptFrmCol_File As String, _
                    inptFrmCol_Lbl As String, _
                    inptDstCol_File As String, _
                    inptDstCol_Lbl As String)

Dim r As Range
Dim s As String
Dim sFile As String
Dim sFrmShtName As String: sFrmShtName = inptFrmSht
Dim sDstShtName As String: sDstShtName = inptDstSht
Dim lFrmCol_File As Long: lFrmCol_File = inptFrmCol_File
Dim lDstCol_File As Long: lDstCol_File = inptDstCol_File
Dim lFrmCol_Lbl As Long: lFrmCol_Lbl = inptFrmCol_Lbl
Dim lDstCol_Lbl As Long: lDstCol_Lbl = inptDstCol_Lbl
Dim lRowEd As Long
Dim i As Long
Dim sSearch As String
Dim lMatchRow As Long

With ThisWorkbook.Sheets(sFrmShtName)
    lRowEd = .Cells(Rows.Count, 1).End(xlUp).Row + 1
    For i = 2 To lRowEd
        sSearch = .Cells(i, lFrmCol_File).Value

        lMatchRow = fPg_searchRow_TB(sSearch, sDstShtName, lDstCol_File)
      
        If sSearch <> "" And lMatchRow > 0 Then
              ThisWorkbook.Sheets(sDstShtName).Cells(lMatchRow, lDstCol_Lbl).Value = .Cells(i, lFrmCol_Lbl).Value
        End If

    Next i

End With

End Sub



Sub HighLightParentheses()

HighLightBetweenWord "{", "}", "wblue"

End Sub



Sub HighLightBetweenWord(inptLhs As String, inptRhs As String, Optional inptColor As String = "red")

Dim r As Range
Dim lPos As Long: lPos = 1
Dim sLhs As String: sLhs = inptLhs
Dim sRhs As String: sRhs = inptRhs
Dim sColor As String: sColor = fGetColorCode(inptColor)

For Each r In Selection

    Do Until InStr(lPos, r, sLhs) = 0

        With r.Characters(Start:=InStr(lPos, r, sLhs), Length:=InStr(lPos, r, sRhs) - InStr(lPos, r, sLhs) + 1).Font
            .Name = "ＭＳ ゴシック"
            .FontStyle = "Regular"
            .Size = 10.5
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
             .Color = sColor
            .TintAndShade = 0
            .ThemeFont = xlThemeFontMinor
        End With
        
        lPos = InStr(lPos, r, sRhs) + 1
    Loop
    
    lPos = 1
    
Next r

End Sub



Function fPg_K2V_PG_CHK(inptStr As String, Optional inptIsSht As Boolean = False) As String

Dim sRslt As String: sRslt = fKey2Val("PG_SETUP", inptStr, "ERR")

If sRslt = "ERR" Then Stop
If sRslt = "" Then Stop
If inptIsSht = True And isSheetName_TB(sRslt) = False Then Stop

fPg_K2V_PG_CHK = fKey2Val("PG_SETUP", inptStr)

End Function



Sub Msq_Split_Src(inptFrmSht As String, inptDstSht As String)
'inptFrm Col Dst Col
Dim r As Range
Dim s As String
Dim sFile As String
Dim sFrmShtName As String: sFrmShtName = inptFrmSht
Dim sDstShtName As String: sDstShtName = inptDstSht
Dim lColEd As Long
Dim lRowEd As Long: lRowEd = ThisWorkbook.Sheets(sFrmShtName).Cells(Rows.Count, 1).End(xlUp).Row + 1
Dim i As Long
Dim ii As Long
Dim v As Variant

With ThisWorkbook.Sheets(sDstShtName)
    
    lColEd = .Cells(1, Columns.Count).End(xlToLeft).Column
    .Range("A2").Resize(Rows.Count - 1, lColEd).Clear

    For i = 1 To lColEd
        If .Cells(1, i).Value <> "" Then

              v = f_Split_Src_byCase(sFrmShtName, sDstShtName, .Cells(1, i).Value)

            For ii = 2 To UBound(v) + 1
              .Cells(ii, i).Value = v(ii - 1, 1)
            Next ii
        End If

    Next i

End With

End Sub



Function f_Split_Src_byCase(inptFrmSht As String, inptDstSht As String, inptField As String) As Variant
Dim vValues As Variant
Dim i As Long
Dim s As String
Dim lSide As Long

Dim sFrmShtName As String: sFrmShtName = inptFrmSht
Dim sDstShtName As String: sDstShtName = inptDstSht
Dim lFrmCol_Src As Long: lFrmCol_Src = fPg_searchField_TB("SRC", sFrmShtName)


With ThisWorkbook.Sheets(sFrmShtName)

    vValues = .Cells(2, lFrmCol_Src).Resize(.Cells(Rows.Count, lFrmCol_Src).End(xlUp).Row - 1, 1).Value

End With

If inptField = "FILE" Then
    lSide = 1
Else
    lSide = 2
End If


For i = 1 To UBound(vValues)
    s = vValues(i, 1)
    s = fsplit(s, 2, "src\")
    s = fsplit(s, lSide, "[SJIS]:")
    s = fsplit(s, lSide, "[UTF-8]:")
    vValues(i, 1) = s
Next i


Select Case inptField


Case "FILE"

    'Lhs : FILE
    For i = 1 To UBound(vValues)
        s = vValues(i, 1)
        s = Trim(s)
        s = fsplit(s, 1, ",") & ",1)"
        If s = ",1)" Then s = ""
        vValues(i, 1) = s
    Next i

Case "CODE"
    'Rhs : CODE
    For i = 1 To UBound(vValues)
        s = vValues(i, 1)
        If Left(Trim(s), 1) <> "'" Then
             vValues(i, 1) = s
        Else
             vValues(i, 1) = ""
        End If
    Next i
    
Case "COUT"
    'Rhs : COUT
    For i = 1 To UBound(vValues)
        s = vValues(i, 1)
        If Left(Trim(s), 1) = "'" Then
            vValues(i, 1) = " " & s
        Else
            vValues(i, 1) = ""
        End If
    
    Next i
    
    
'   x FILE => MATCH ROW TYPE
'  Case "LBL(DEF)"
'    'Rhs : CALL
'    For i = 1 To UBound(vValues)
'    s = vValues(i, 1)
'    If Left(Trim(s), 1) <> "'" Then vValues(i, 1) = fPg_GetCallName(s)
'    Next i
'
'
'Case "CALL"
'
'    Dim FncLst As String
'
'    FncLst = fReplace(WorksheetFunction.TextJoin("|", _
'                            True, _
'                            ThisWorkbook.Sheets(ShtFncLst).Columns(fPg_searchCol("LABEL", ThisWorkbook.Name, ShtFncLst))), _
'                            "LABEL|", "")
'
'    'Rhs : CALL
'    For i = 1 To UBound(vValues)
'    s = vValues(i, 1)
'    If Left(Trim(s), 1) <> "'" Then vValues(i, 1) = "FNC"
'    Next i
    
Case Else

vValues = Array()

End Select


f_Split_Src_byCase = vValues


End Function




Function isSheetName_TB(inptStr As String) As Boolean
Dim v As Variant

For Each v In ThisWorkbook.Sheets
    If v.Name = inptStr Then
        isSheetName_TB = True
        Exit Function
    End If
Next v

    isSheetName_TB = False

End Function


Sub ClearConditions()
    Selection.FormatConditions.Delete
End Sub



Sub HighLightCell(inptCol As String, inptSht As String)
Dim sKeyCol As String: sKeyCol = inptCol
Dim sSht As String: sSht = inptSht
Dim sWords As String
Dim sColor As String
Dim v As Variant

With ThisWorkbook.Sheets(sSht)
    .Range(.Cells(fPg_searchRow("【ST】", ThisWorkbook.Name, sSht) + 1, fPg_searchCol_AS(sKeyCol)), Cells(Rows.Count, fPg_searchCol_AS(sKeyCol))).Select
    
        sWords = Cells(fPg_searchRow("【COND】", ThisWorkbook.Name, sSht), fPg_searchCol_AS(sKeyCol)).Value

    For Each v In Split(sWords, "|")
        
        If sWords <> "" Then Call SetConditions(fsplit(v, 1, ":"), fsplit(v, 2, ":"))
        
    Next v
    
End With


End Sub



Sub SetConditions(inptWord As String, inptColor As String)
Dim sWord As String: sWord = inptWord
Dim sColor As String: sColor = UCase(inptColor)


Selection.FormatConditions.Add Type:=xlTextString, String:=inptWord, _
    TextOperator:=xlContains
Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
With Selection.FormatConditions(1).Font
    .TintAndShade = 0
End With
With Selection.FormatConditions(1).Interior
    .PatternColorIndex = xlAutomatic
    .TintAndShade = 0
End With

    
Select Case sColor
 Case "RED"
    With Selection.FormatConditions(1).Font
        .Color = -16383844
    End With
    With Selection.FormatConditions(1).Interior
        .Color = 13551615
    End With

 Case "YELLOW"
     With Selection.FormatConditions(1).Font
        .Color = -16754788
    End With
    With Selection.FormatConditions(1).Interior
        .Color = 10284031
    End With

 Case "GREEN"
    With Selection.FormatConditions(1).Font
        .Color = -16752384
    End With
    With Selection.FormatConditions(1).Interior
        .Color = 13561798
    End With


 Case "BLUE"

    With Selection.FormatConditions(1).Font
        .Color = -10477568
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent5
        .TintAndShade = 0.599963377788629
    End With
 
 
 Case "【COND】"
    'Do nothing
 
 Case Else
    Stop

End Select

    Selection.FormatConditions(1).StopIfTrue = True

End Sub


Function fPg_searchRow_TB(inptKey As String, inptSht As String, Optional inptCol As Long = 1) As Long

 fPg_searchRow_TB = fPg_searchRow(inptKey, ThisWorkbook.Name, inptSht, inptCol)

End Function

Function fPg_searchField_TB(inptKey As String, inptSht As String) As Long
    
 fPg_searchField_TB = fPg_searchCol(inptKey, ThisWorkbook.Name, inptSht)
 
End Function

Function fPg_searchCol_AS(inptKey As String)
 fPg_searchCol_AS = fPg_searchCol(inptKey, ThisWorkbook.Name, ActiveSheet.Name)
End Function

Function fPg_searchRow_AS(inptKey As String)
 fPg_searchRow_AS = fPg_searchRow(inptKey, ThisWorkbook.Name, ActiveSheet.Name)
End Function


Function fPg_searchRow(inptKey As String, inptBook As String, inptSht As String, Optional inptCol As Long = 1) As Long
'FIND => ROW
'NOT  => 0
Dim sWbName As String:  sWbName = inptBook
Dim sWsName As String:  sWsName = inptSht
Dim sKey As String: sKey = inptKey
Dim lCol As Long: lCol = inptCol
Dim sMatchCol As String
Dim sRslt As String
Dim rCol As Range
On Error Resume Next

With Workbooks(sWbName).Worksheets(sWsName)
    Set rCol = .Columns(lCol)
    If rCol Is Nothing Then InsertLog ("FAIL [searchActShtField] Book or Sheet name is wrong")
        sMatchCol = Application.WorksheetFunction.Match(sKey, rCol, 0)
        If sMatchCol <> "" Then
                sRslt = sMatchCol
            Else
                sRslt = ""
        End If
End With

fPg_searchRow = CLng(sRslt)

End Function


Function fPg_searchCol(inptKey As String, inptBook As String, inptSht As String) As Long
'FIND => COLUMN
'NOT  => 0
Dim sWbName As String:  sWbName = inptBook
Dim sWsName As String:  sWsName = inptSht
Dim sKey As String: sKey = inptKey
Dim sMatchRow As String
Dim sRslt As String
Dim rRow As Range
On Error Resume Next

With Workbooks(sWbName).Worksheets(sWsName)
    Set rRow = .Rows(1)
    If rRow Is Nothing Then InsertLog ("FAIL [searchActShtField] Book or Sheet name is wrong")
        sMatchRow = Application.WorksheetFunction.Match(sKey, rRow, 0)
        If sMatchRow <> "" Then
                sRslt = sMatchRow
            Else
                sRslt = ""
        End If
End With

fPg_searchCol = CLng(sRslt)

End Function



Sub Pg_FillDLLabel(inptFrmSht As String, inptDstSht As String, inptDstColLbl As String)
Dim r As Range
Dim s As String
Dim i As Long

Dim sDstColLbl As String: sDstColLbl = inptDstColLbl

Dim shtfrmName As String: shtfrmName = inptFrmSht
Dim lColFrmFile As Long: lColFrmFile = fPg_searchCol("FILE", ThisWorkbook.Name, inptFrmSht): If lColFrmFile = 0 Then Stop
Dim lColFrmLbl As Long: lColFrmLbl = fPg_searchCol("LABEL", ThisWorkbook.Name, inptFrmSht): If lColFrmLbl = 0 Then Stop

Dim shtDstName As String: shtDstName = inptDstSht
Dim lColDstFile As Long: lColDstFile = fPg_searchCol("FILE", ThisWorkbook.Name, inptDstSht): If lColDstFile = 0 Then Stop
Dim lColDstLbl As Long: lColDstLbl = fPg_searchCol(sDstColLbl, ThisWorkbook.Name, inptDstSht): If lColDstLbl = 0 Then Stop

Dim lRowSt As Long: lRowSt = 2
Dim lRowEd As Long


On Error Resume Next

With ThisWorkbook.Sheets(shtfrmName)
lRowEd = .Cells(Rows.Count, 1).End(xlUp).Row + 1
    
    For i = lRowSt To lRowEd
        
        s = .Cells(i, lColFrmFile).Value

        If s <> "" Then

            sMatchRow = Application.WorksheetFunction.Match(s, ThisWorkbook.Sheets(shtDstName).Columns(lColDstFile), 0)
        
            If sMatchRow <> "" Then
            
                 ThisWorkbook.Sheets(shtDstName).Cells(sMatchRow, lColDstLbl).Value = _
                  ThisWorkbook.Sheets(shtfrmName).Cells(i, lColFrmLbl).Value
                        
            End If
        
        End If
        
    Next i

End With

End Sub



Function fPg_GetCallName(inptStr As String) As String

'''

End Function



Function fTrim_FncName(inptStr As String) As String

fTrim_FncName = fsplit(fReplace(inptStr, fRegxFirstMatch(inptStr, ".*(Function|Sub|Property)\s+"), ""), 1, "(")

End Function




Function fSplit_FncName(inptFncName As String) As String

Dim s As String: s = inptFncName
Dim sRslt As String
Dim arr As Variant

arr = Split(fsplit(s, 1, "("), " ")


If UBound(arr) = -1 Then
    sRslt = ""
Else
    sRslt = CStr(arr(UBound(arr)))
End If

fSplit_FncName = sRslt

End Function




Sub fPg_UpdateRow()
Dim sKey As String '
Dim i As Long '
Dim ii As Long
Dim sDstWs As String: sDstWs = "MAIN"
Dim sMatchRow As String
Dim sRslt As String
Dim rRow As Range
Dim lFile_Col As Long: lFile_Col = 1
Dim shtActive As String: shtActive = ActiveSheet.Name
Dim rSel As Range: Set rSel = Selection

On Error Resume Next


' FOR EACH SELECTION
For i = Selection(1).Row To Selection(Selection.Count).Row

'GET KEY => FILE_COL VAL
sKey = Cells(i, lFile_Col).Value ' CURRENT FILE NO

'SEARCH KEY ON DOWNLOAD SHEET
With ThisWorkbook.Sheets(sDstWs)
    Set rRow = .Columns(.Columns(lFile_Col).Column)
        ' NOT MATCH
        If rRow Is Nothing Then Exit Sub
        'SEARCH
        sMatchRow = Application.WorksheetFunction.Match(sKey, rRow, 0)
        If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rRow, 0)
        
        If sMatchRow <> "" Then
        'COPY PASTE TO DST WS
    
            For ii = 1 To 20
            
             If Not (ii = 1 Or ii = 4) Then ThisWorkbook.Sheets(shtActive).Cells(i, ii).Copy ThisWorkbook.Sheets(sDstWs).Cells(sMatchRow, ii)
                   
            Next ii

        End If ' If sMatchRow <> "" Then
    
End With

Next i

rSel(1).Select


End Sub


'
'Sub createSQLnnnSheet()
'
'Dim rCopy As Range: Set rCopy = ThisWorkbook.Sheets("COPY_FROM").Range("A1:B5")
'Dim wb As Workbook: Set wb = Workbooks("MACRO_221002.xlsm")
'Dim i As Long
'
'For i = 1 To 2
'
'    wb.Sheets(Sheets.Count).Activate
'
'    With wb.Sheets.Add(After:=ActiveSheet)
'
'        rCopy.Copy
'        .Paste
'        .Name = "NEW_FILE_" & Format(i, "000")
'        Range("A1").Select
'        ActiveCell.FormulaR1C1 = "AAA" & Format(i, "000")
'
'    End With
'
'Next i
'
'End Sub


''''''''TRY





Sub MakeBorder(inptRng As Range)
' makeborder(activesheet.range("A7"))

    With inptRng.Borders
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
        
    
End Sub



Sub FillDLColor(inptRng As Range)
' FillDLColor(activesheet.range("A7"))

    With inptRng.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent1
        .TintAndShade = 0.599993896298105
        .PatternTintAndShade = 0
    End With
    
End Sub



    
Function fGet_BaanTn(inptStr As String) As String

Dim sPtn As String
sPtn = fKey2Val("PRG_SHT_MCRTST", "RGX_BAAN_TN")
'[ADD LIKNK SHT] => PRG_SHT_MCRTST,macrobook_tsk_230120.xlsm,MCR_TEST,A,B

fGet_BaanTn = fRegxMatch(inptStr, sPtn)

End Function



Sub createSht()

Dim i As Long
Dim lCnt As Long
Dim ws As Worksheet

For i = 1 To 2

    With ThisWorkbook.Sheets.Add(After:=Sheets(Sheets.Count))
        ThisWorkbook.Sheets("COPY_FROM").Copy
        .PasteSpecial
        .Name = "NEW_SHEET_" & Format(i, "000")

    End With
    
Next i

End Sub



Sub CreateNewWindow()
    ActiveWindow.NewWindow
End Sub



Sub PickLabel_Full(inptFileCol As Long, inptLabelCol As Long)
Dim i As Long
Dim ii As Long
Dim wsDst As Worksheet: Set wsDst = SelectOrCreateWs("INDEX")
Dim wsFrm As Worksheet: Set wsFrm = ThisWorkbook.Worksheets("MAIN")
Dim ldstRow As Long: ldstRow = 2
Dim sSp As String
Dim sPtn As String
Dim lColFrmFile As Long: lColFrmFile = inptFileCol
Dim lColFrmLabel As Long: lColFrmLabel = inptLabelCol

With wsDst
    If .Range("A1").Value = "OFF" Then Exit Sub
    .Range(.Cells(2, 1), .Cells(.Rows.Count, .Columns.Count)).Clear
End With

With wsFrm

    For i = 2 To .Cells(Rows.Count, lColFrmFile).End(xlUp).Row
    
     If .Cells(i, lColFrmLabel).Value <> "" And _
         Left(Trim(.Cells(i, lColFrmLabel)), 1) = "【" Or _
         .Cells(i, lColFrmLabel).Value = "*" _
        Then

        Select Case True

            Case Left(Trim(.Cells(i, lColFrmLabel)), 4) = "【FNC"
                 sSp = ""

            Case Left(Trim(.Cells(i, lColFrmLabel)), 4) = "【SQL"
                sSp = "   "

            Case Left(Trim(.Cells(i, lColFrmLabel)), 1) = "【"
                sSp = "      "

            Case Left(Trim(.Cells(i, lColFrmLabel)), 1) = "*"
                sSp = "    　    "
         End Select
         
         
        For ii = 1 To 9
        
            If ii = lColFrmLabel Then
                wsDst.Cells(ldstRow, ii).Value = sSp & wsFrm.Cells(i, ii)
            Else
                wsDst.Cells(ldstRow, ii).Value = wsFrm.Cells(i, ii)
            End If
            
        Next ii
         
        ldstRow = ldstRow + 1
        
        End If

    Next i
    
End With

 
End Sub


Sub PickLabel()
Dim lColFrmFile As Long: lColFrmFile = fCol("A")
Dim lColFrmLabel As Long: lColFrmLabel = fCol("D")

Dim lDST_LABEL As Long: lDST_LABEL = fCol("D")
Dim rCell As Range
Dim sPtn As String
sPtn = "【SQL"

'Application.ScreenUpdating = False

Call PickLabel_Full(lColFrmFile, lColFrmLabel)

    With ThisWorkbook.Sheets("index")

        .Range(.Cells(2, lDST_LABEL), .Cells(.Cells(Rows.Count, lDST_LABEL).End(xlUp).Row, lDST_LABEL)).Select

        For Each rCell In Selection
            
            If rCell.Value <> "" Then
                If fRegxTest(Trim(rCell.Value), sPtn) = True Then
                    rCell.EntireRow.Hidden = False
                Else
                    rCell.EntireRow.Hidden = True
                    
                End If
            End If
            
        Next rCell



    End With

Application.ScreenUpdating = True

End Sub


Sub ooo_SETUP_BOOK_oooo()
End Sub


Sub SetUpPrgWorkBook()

'Delete Sht Not(SEUP Or LINKSHT Or USER_PRM)
'Create Sht (PRG_PRM)

Dim ws As Worksheet
Dim sWs As String
Dim sPtn As String
Dim o As Object

Application.DisplayAlerts = False


For Each ws In ThisWorkbook.Sheets

    If Not fRegxTest(ws.Name, "SETUP|LinkSht|PRG_PRM") Then
        ws.Delete
    End If

Next ws


sWs = "USER_PRM"

With SelectOrCreateWs(sWs)
    'CONST
    
    .Cells.Clear
    .Range("A1").Value = "FILE"
    .Range("B1").Value = "VARIANT"
    .Range("C1").Value = "VALUE"
    .Range("D1").Value = "SHEET"
    .Range("E1").Value = "COMMENT"
    
    'Const\s+([_\d\w]+)[\s\d\w]+=\s+([_""\d\w]+)
    Call PrgDownloadMatches(fKey2Val("PRG_SHT_PRG", "PRG_PTN_CNST"), sWs, "A:0,0|B:0,1")
    
End With


sWs = "MAIN"

With SelectOrCreateWs(sWs)
    'CONST
    
    .Cells.Clear
    .Range("A1").Value = "FILE"
    .Range("B1").Value = "VARIANT"
    .Range("C1").Value = "VALUE"
    .Range("D1").Value = "SHEET"
    .Range("E1").Value = "COMMENT"
    
    'Const\s+([_\d\w]+)[\s\d\w]+=\s+([_""\d\w]+)
    Call PrgDownloadMatches("|", sWs, "A:0,0")

End With


With SelectOrCreateWs("PRG_SVR")
    'SERVER
    
    
End With

With SelectOrCreateWs("PRG_VER")
    'VERSION
    
    
End With


Application.DisplayAlerts = True

End Sub





Sub ooo_CREATE_PATERN_ooo()
End Sub


Function fPrgCreateRegxPtn(inptPtn As String, inptMatchN As Long, inptSubMatchN As Long) As String
'RET xxx|xxx|xxx AS String IN PRJ FOLDER
'EX:
' CONST
' FNC/SUB
' ATTR Attribute VB_Name = "Sheet10"

Dim vFile As Variant
Dim sFolder As String: sFolder = fKey2Val("PRG_SHT_SETUP", "PRJ_SRC_PATH")
Dim sPtn As String: sPtn = inptPtn
Dim lMatchNum As Long: lMatchNum = inptMatchN
Dim lSubMatchnum As Long: lSubMatchnum = inptSubMatchN
Dim sMatchKey As String: sMatchKey = inptPtn
Dim sLine As String

Dim sResult As String
'Dim sthOut As Worksheet: Set shtout = SelectOrCreateWs("FncList")

'If sMatchKey = "NotMatch" Or sMatchKey = "" Then InsertLog ("DownloadMatchList Key2Ver Error")

'MAKE FUNCTION NAME LIST
For Each vFile In fGetFilePathInFolder(sFolder) 'Folder path("C:\ANY") : string  =>  File list : object

    With CreateObject("Scripting.FileSystemObject").OpenTextFile(CStr(vFile))
            
            Do While .AtEndOfStream <> True
            
                sLine = CStr(.readline)

                If fRegxTest(sLine, sPtn) Then
                    sLine = fRegxMatch(sLine, sPtn, lMatchNum, lSubMatchnum)
                    
                    sLine = fReplace(sLine, "_", "\_")
                    sLine = fReplace(sLine, "(", "\(")
                    sLine = fReplace(sLine, ")", "\)")
                    sLine = fReplace(sLine, ".", "\.")
                    
                    sResult = WorksheetFunction.TextJoin("|", True, sResult, sLine)
                
                End If
            Loop 'read sLine
    .Close
    End With 'open file
Next vFile

'!YET if duplicate function name
fPrgCreateRegxPtn = sResult

End Function




Sub ooo_WROKSHT_FNC_oooo()
End Sub


Sub WriteValueOnSht(inptSht As String, inptKey As String, inptVal As String)

Dim rCell As Range

If IsExistWs(inptSht) = False Then InsertLog ("not exist worksheet name :" & inptSht): Exit Sub

With ThisWorkbook.Sheets(inptSht)

    With .Cells(Rows.Count, 1).End(xlUp)

        .Offset(1, 0).Value = inptKey
        .Offset(1, 1).Value = inptVal

    End With

End With

End Sub


Sub ooo_WS_CHIP_oooo()
End Sub




Sub HighLightWord(Optional inptColor As String = "red", Optional inptPtn As String = "PRG_MARK_PTN")
Dim rCell As Range
Dim sText As String
Dim sMatch As String
Dim sPtn As String: sPtn = fKey2Val("LS_BC", inptPtn)
Dim lSt As Long
Dim lEd As Long
Dim lPos As Long: lPos = 0
Dim cColor
Select Case inptColor
 Case "red"
  cColor = cRed
  
 Case "blue"
  cColor = cBlue
 
 Case Else
  clorol = False


End Select

    For Each rCell In Selection

        If rCell <> "" Or _
           fRegxTest(rCell.Value, sPtn) = True _
           Then
            
            sText = rCell.Value
        
            Do While fRegxTest(sText, sPtn) = True

                sMatch = fRegxMatchs(sText, sPtn)(0)
                
                lSt = InStr(sText, sMatch)
                lEd = Len(sMatch)
                
                With rCell.Characters(Start:=lPos + lSt, Length:=lEd).Font
                    
                    If cColor = False Then
                        .ColorIndex = xlAutomatic
                    Else
                        .Color = cColor
                    End If
                    
                End With

                lPos = lPos + lSt + lEd - 1

                sText = Mid(sText, lSt + lEd, Len(sText))
        
            Loop
        
        End If
        
    lPos = 0
    
    Next rCell
    
End Sub


Function fWs_Get_FName(inptStr As String) As String

fWs_Get_FName = fRegxMatchs(inptStr, "\s([\d\w_]+\.(dat|bas|frm|cls))")(0).submatches(0)

End Function


Sub SetUpWorkBook()

Dim ws As Worksheet
'Application.ScreenUpdating = False
    With ThisWorkbook
        For Each ws In .Worksheets
            ActiveWindow.View = xlPageBreakPreview
            ActiveWindow.View = xlNormalView
            ActiveWindow.Zoom = 100
            ActiveWindow.Zoom = 100
            ws.Activate
            ws.Range("A1").Activate
Next ws
    
    .Sheets(1).Activate
    
    End With
'Application.ScreenUpdating = True

End Sub



Function fGetRngPrm(inptSht As String, inptRng As String, inptDsc As String, Optional inptCmt As String = "") As String
' fGetParam("SHT","A","DESC","RG_XXX")

Dim sResult As String

sResult = "[" & inptSht & "]シート"

sResult = sResult & "."

sResult = sResult & "[" & inptRng

sResult = sResult & ":"

sResult = sResult & inptDsc & "]"

If inptCmt <> "" Then
    
    sResult = sResult & " / "
    
    sResult = sResult & inptCmt

End If

fGetCellPrm = sResult

End Function



Sub clearImmediate()

Debug.Print String(1000, vbLf)

End Sub


Sub HideRoW_ast()
    HideRoW ("*")
End Sub

Sub HideRoW(Optional inptMark As String = "")

Dim rCell As Range
Dim sMark As String: sMark = inptMark


For Each rCell In Selection

    If rCell.Value <> "" Then
        
        If sMark = "" Then
            
            rCell.EntireRow.Hidden = True
        
        Else
        
            If rCell.Value = sMark Then rCell.EntireRow.Hidden = True
            
        End If
    
    End If
    
Next rCell


End Sub


Sub HideRow_Regx(inptPtn As String)

Dim rCell As Range
Dim sPtn As String: sPtn = inptPtn


For Each rCell In Selection

    If rCell.Value <> "" Then
        
        If fRegxTest(rCell.Value, sPtn) = False Then
            
            rCell.EntireRow.Hidden = True
        
        End If
    
    End If
    
Next rCell


End Sub

Sub showHiddenRow()

Dim rCell As Range

    For Each rCell In Selection
        
        rCell.EntireRow.Hidden = False
        
    Next rCell

End Sub




Sub HideCol(Optional inptMark As String = "")

Dim rCell As Range
Dim sMark As String: sMark = inptMark


For Each rCell In Selection

    If rCell.Value <> "" Then
        
        If sMark = "" Then
            
            rCell.EntireColumn.Hidden = True
        
        Else
        
            If rCell.Value = sMark Then rCell.EntireColumn.Hidden = True
            
        End If
    
    End If
    
Next rCell


End Sub


Sub showHiddenCol()

Dim rCell As Range

    For Each rCell In Selection
        
        rCell.EntireColumn.Hidden = False
        
    Next rCell

End Sub

Sub ooo_FILE_IO_oooo()
End Sub



Function fReadAllText(inptFilePath As String) As String

With CreateObject("Scripting.FileSystemObject").GetFile(inptFilePath).OpenAsTextStream
    fReadAllText = .readall
End With

End Function



'==================================================================================================

'Files in single Folder

'==================================================================================================

Function fGetFilePathInFolder(inptFolderPath As String) As Object ' Folder path("C:\ANY") : string  =>  File list : object
' return value usage // oArr(n) -> string, oArr.count
' not include folder, file type only

Dim oFSO As Object
Dim oFolder As Object
Dim oFile As Object: Set oFSO = CreateObject("Scripting.FileSystemObject")
Dim sFolder As String: sFolder = inptFolderPath: Set oFolder = oFSO.getFolder(sFolder)
Dim oArr As Object: Set oArr = CreateObject("System.Collections.ArrayList")
Dim i As Integer

For Each oFile In oFolder.Files

    oArr.Add oFile.Path
   ' oFile.Name -> d20211101_mod_DbgXml.bas
   ' oFile.Path -> C:\Users\admin\Documents\tsk\d20211101_mod_DbgXml.bas
    
    i = i + 1

Next oFile

Set fGetFilePathInFolder = oArr

Set oFSO = Nothing
Set oFolder = Nothing
Set oFile = Nothing
Set oArr = Nothing

End Function




'==================================================================================================

'file IO
'file path to text

'==================================================================================================


'
'Function fFilePath2IndexedText(inptFilePath As String, inptDelimiter As String) As Variant
'
'            'file path : string => Lines : variant(tIndexedText)
'
'Dim sFilePath As String: sFilePath = inptFilePath
'Dim sDelimiter As String: sDelimiter = inptDelimiter
'Dim vLines() As tIndexedtext
'            Dim sText As String
'Dim sIndex As String: sIndex = 1
'
'Open sFilePath For Input As #1
'
'    Do Until EOF(1)
'        Line Input #1, sLine
'
'        ReDim vLines(sIndex)
'
'        With vLines(sIndex - 1)
'            .index = slindex
'            .line = sLine
'            .fileName = Dir(sFilePath)
'         End With
''                            sText = sText & Format(sIndex, "0000") & " _:_ "
''                            sText = sText & sLine & vbLf
'    Loop
'
'Close #1
'
'Stop
'
''fFilePath2IndexedText = vLines
'
'End Function

                    



'wait to adding ============================================================


Function fSwith(inptExp As String)
'memo
'Evaluate("left(""ABC"",1)")
'Switch("exp","rslt1","rtn1")
'?  Switch( 0 = 0 , "0", 1=1, "1") -> 0

End Function



Function fCol(inptCol As String) As Long

fCol = Columns(inptCol).Column

End Function



'Sub FillDLWsFunction_OBJLIST()
'
'Dim i As Long: i = 2
'Dim shtOBJLST: shtOBJLST = "OBJ_LIST"
'
'    Do Until Sheets(shtOBJLST).Cells(i, fCol("A")).Value = ""
'
'     With Sheets(shtOBJLST)
'
'            .Cells(i, fCol("C")).Value = fRegxFirstMatch(.Cells(i, fCol("A")).Value, "[\d\w]+\.(bas|form|cls)")
'
'             i = i + 1
'
'        End With
'
'    Loop
'
'End Sub



Function retThisWbName() As String
    retThisWbName = ThisWorkbook.Name
End Function



Function fRegxTest(ByVal inptStr As String, ByVal inptPattern As String, Optional inptRestrict As String = False) As Boolean

Dim sResult As Boolean

    With CreateObject("VBScript.RegExp")
        
        .Global = True
        .MultiLine = True
        .ignorecase = True
        .Pattern = inptPattern
    
        If .test(inptStr) Then
            
            If inptRestrict <> False Then
            
                sResult = Len(fRegxMatchs(inptStr, inptPattern)(0)) = Len(inptStr)
            
            Else
                
                sResult = True
        
            End If
        
        Else
        
                sResult = False
        
        End If
    
    End With
    
fRegxTest = sResult
    
End Function



Function fRegxFirstMatch(ByVal inptStr As String, _
                                       ByVal inptPattern As String, _
                                       Optional inptSub As String = "") As String
'? fRegxFirstMatch("2023/01/07  01:35            51,209 d20211101_mod_DbgXml.bas", "[\d\w]+\.(bas|form)")
'd20211101_mod_DbgXml.bas

If fRegxMatchs(inptStr, inptPattern) Is Nothing Then
    fRegxFirstMatch = "#VALUE!"
Else
    'mutch or submatch
    If inptSub = "" Then
        fRegxFirstMatch = fRegxMatchs(inptStr, _
                                                        inptPattern)(0)
    Else
        fRegxFirstMatch = fRegxMatchs(inptStr, _
                                                        inptPattern)(0).submatches(CLng(inptSub))
    End If
End If

End Function

Sub Spoil(inptStr As String)
    InsertLog (inptStr)
End Sub


Sub InsertLog(inptStr As String, Optional inptFile As String = "")
Dim sStr As String
sStr = Format(Now(), "YYYY/MM/DD  HH:MM") & "      " & inptStr

ThisWorkbook.Sheets("DEBUG").Range("A1").EntireRow.Insert
ThisWorkbook.Sheets("DEBUG").Range("A1").Value = sStr

End Sub



''''FILE OUT PUT VCERSION
'Sub InsertLog(inptStr As String, Optional inptFile As String = "")
'Dim sPath As String
'Dim sStr As String
'sPath = ThisWorkbook.Path & "\" & Switch(inptFile = "", "vbaLog.txt", inptFile <> "", inptFile)
'
'sStr = CStr(Now()) & " : " & inptStr
'
'With CreateObject("Scripting.FileSystemObject")
'
'    If Dir(sPath) <> "" Then
'
''        With .OpenTextFile(sPath, ForAppending)
''            .Write sStr & vbLf
''        End With
'
'        Open sPath For Append As #1
'        Print #1, sStr
'        Close #1
'
'    Else
'
'        With .CreaTetextFile(sPath)
'            .Write sStr & vbLf
'        End With
'
'    End If
'
'End With
'
'End Sub



Function IsExistWs(inptShtName As String, Optional inptWb As String = "") As Boolean
Dim sSht As String: sSht = inptShtName
Dim sWb As Workbook: If inptWb = "" Then Set sWb = ThisWorkbook Else Set sWb = Workbooks(inptWb)
Dim s As Worksheet
Dim sResult As Boolean

sResult = False

For Each s In sWb.Sheets
    If s.Name = sSht Then
        sResult = True
    End If
Next s
    

IsExistWs = sResult

End Function


Function SelectOrCreateWs(inptShtName As String, Optional inptWb As String = "") As Worksheet
Dim sSht As String: sSht = inptShtName
Dim sWb As Workbook: If inptWb = "" Then Set sWb = ThisWorkbook Else Set sWb = Workbooks(inptWb)
Dim s As Worksheet
Dim sht As Worksheet

'YET
'If shtOBJDTL Is Nothing Then InsertLog ("[FAIL] does not find worksheet, be sure that window frame is only single"): Exit Sub

If sSht = "" Then InsertLog ("Sheet Name Is Empty"): Exit Function
'If Not sWb = ThisWorkbook.Name Then InsertLog ("External Workbook : SelectOrAddWs")

For Each s In sWb.Sheets
    If s.Name = sSht Then
        Set SelectOrCreateWs = sWb.Sheets(sSht)
        Exit Function
    End If
Next s

With sWb.Worksheets.Add
    .Name = sSht
    Set sht = sWb.Sheets(sSht)
End With

Set SelectOrCreateWs = sht

End Function



Sub ooo_REGX_MATCH_ooo()

End Sub

'==================================================================================================

'regural expression

'==================================================================================================


Function fRegxMatch(ByVal inptStr As String, _
                                  ByVal inptPattern As String, _
                                  Optional inptIndex As Long = 0, _
                                  Optional inptSubIndex As Long = 999999999, _
                                  Optional inptErrMsg As String = "#VALUE!") As String
'[usage] named parameter
'Print fRegxMatch("ABCDE1234", "XYZ", inptErrMsg:="Oooops!")
'Oooops!

Dim sResult As String

If fRegxMatchs(inptStr, inptPattern) Is Nothing Then
    
    sResult = inptErrMsg

ElseIf fRegxMatchs(inptStr, inptPattern).Count - 1 < inptIndex Then
    
    sResult = inptErrMsg

ElseIf inptSubIndex <> 999999999 And _
        fRegxMatchs(inptStr, inptPattern)(inptIndex).submatches.Count - 1 >= inptSubIndex Then
    
        sResult = fRegxMatchs(inptStr, inptPattern)(inptIndex).submatches(CLng(inptSubIndex))
    
Else

    sResult = fRegxMatchs(inptStr, inptPattern)(inptIndex)
    
End If

fRegxMatch = sResult

End Function


'NOT FOR WORK SHEET
Function fRegxMatchs(ByVal inptStr As String, _
                                  ByVal inptPattern As String, _
                                  Optional ByVal inptG As String = True, _
                                  Optional ByVal inptM As String = True, _
                                  Optional ByVal inptI As String = True) As Object
'[USAGE]
'Print fRegxMatchs("xxxtttisi150", "\w{6}\d{3}")(0)
'tttisi150
'Print fRegxMatchs("xxxtttisi150", "\w{6}\d{3}")(0).Value
'tttisi150

'Optinal Global -> If True, then all the matches of the pattern in the string are found.
'                           If False then only the first match is found.
Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim oMatchs As Object

    With regx
        
        .Global = inptG
        .MultiLine = inptM
        .ignorecase = inptI
        .Pattern = inptPattern
    
    End With

If regx.test(inptStr) Then

    Set oMatchs = regx.Execute(inptStr)

End If

Set fRegxMatchs = oMatchs

Set oMatchs = Nothing

End Function



'return match ...
Function fReplace(ByVal inptStr As String, ByVal inptSearch As String, ByVal inptReplace As String) As String
    fReplace = Replace(inptStr, inptSearch, inptReplace)
End Function


Function fReplaceRegx(ByVal inptStr As String, ByVal inptPattern As String, ByVal inptReplace As String) As String
'(group) => $n~

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
    With regx
        .Global = False 'isMultiple
        .MultiLine = True
        .ignorecase = True
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    fReplaceRegx = regx.Replace(inptStr, inptReplace)
End If

End Function




'==================================================================================================

'get value

'==================================================================================================



'値の取得""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Function fKey2Val(inptLabel As String, _
                            inptKey As String, _
                            Optional inptErrMsg As String = "#VALUE!", _
                            Optional inptSht As String = "LinkSht") As String
                            
'[usage] named parameter
'Print fRegxMatch("ABCDE1234", "XYZ", inptErrMsg:="Oooops!")
'Oooops!

Dim sLabel As String: sLabel = inptLabel
Dim sKey As String: sKey = inptKey
Dim sData As Variant
Dim sResult As Variant
Dim sShtName As String: sShtName = inptSht
Dim rRng As Range: Set rRng = ThisWorkbook.Sheets(sShtName).Rows(1)
Dim lIndex As Long
Dim bMatch As Boolean
Dim sErrMsg As String: sErrMsg = inptErrMsg

'検索シートの指定列から検索キーと一致した行の配列データを取得
sData = fGetRowData(ThisWorkbook.Name, rRng.Worksheet.Name, sLabel, "A")

'検索キーとの一致なし
If UBound(sData) = -1 Then
    Call InsertLog("fGetRowData fail : " & inptLabel & " " & inptKey & " " & inptSht)
    fKey2Val = sErrMsg: Exit Function
End If

'行から必要なパラメーターを取り出し
Dim sWb As String: sWb = sData(2)
Dim sWs As String: sWs = sData(3)
Dim sKeyCol As String: sKeyCol = WorksheetFunction.Trim(sData(4))
Dim sRtnCol As String: sRtnCol = WorksheetFunction.Trim(sData(5))

'エラー出力
If sWb = "" Or sWb = sErrMsg Then Call InsertLog("sWb : " & sWb)
If sWs = "" Or sWs = sErrMsg Then Call InsertLog("sWs : " & sWs)
If sKeyCol = "" Or sKeyCol = sErrMsg Then Call InsertLog("sKeyCol : " & sKeyCol)
If sRtnCol = "" Or sRtnCol = sErrMsg Then Call InsertLog("sRtnCol : " & sRtnCol)


sResult = fGetCellData(sWb, sWs, sKey, sKeyCol, sRtnCol, sErrMsg)

fKey2Val = sResult

End Function


'検索キーからセルデータを取得する""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Private Function fGetCellData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String, inptTargetCol As String, inptErrMsg As String) As String

Dim sWbName As String: sWbName = inptWb: If sWbName = "" Or sWbName = "_" Then sWbName = ThisWorkbook.Name
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim sRslt As String
Dim sErrMsg As String: sErrMsg = inptErrMsg

On Error Resume Next

With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then
        Call InsertLog("FAIL [fGetCellData] " & vbNewLine & _
                                        "InptKey : " & inptKey & vbNewLine & _
                                         "WbName : " & sWbName & vbNewLine & _
                                         "WsName : " & sWsName)
        fGetCellData = "#N/A#": Exit Function
    End If
    
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rColKey, 0)
    If sMatchRow <> "" Then
        sRslt = .Cells(CLng(sMatchRow), sTargetCol).Value
    Else
        sRslt = sErrMsg
    End If
End With

fGetCellData = sRslt

End Function



'検索キーから行データを取得する""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Function fGetRowData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String) As Variant

Dim sWbName As String: sWbName = inptWb: If sWbName = "" Or sWbName = "_" Then sWbName = ThisWorkbook.Name
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
'Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim vRslt As Variant

On Error Resume Next
With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then fGetRowData = Array()
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow <> "" Then
            vRslt = Application.Transpose(Application.Transpose(.Rows(CLng(sMatchRow)).Value))
        Else
            vRslt = Array()
    End If

End With

fGetRowData = vRslt

End Function


Function fsplit(ByVal inptStr As String, ByVal inptCol As Integer, Optional ByVal inptSplt As String = ",", Optional inptMatch As Boolean = False) As String
Dim sStr As String: sStr = inptStr
Dim lCol As Integer: lCol = inptCol
Dim sSplt As String: sSplt = inptSplt
Dim sRslt As String
Dim aStr() As String

aStr = Split(sStr, sSplt)

If UBound(aStr) = -1 Or UBound(aStr) = 0 Or lCol = 0 Then
    sRslt = sStr
ElseIf lCol > UBound(aStr) + 1 Then
    sRslt = sStr
ElseIf lCol < 0 Then
    sRslt = aStr(UBound(aStr) + 1 + lCol)
Else
    sRslt = aStr(lCol - 1)
End If


If inptMatch = True And sRslt = inptStr Then sRslt = ""

fsplit = sRslt

End Function


Sub ooo_SQLOWL_ooo()
End Sub


'OwlSql 20211018

'CreateSQLQuery
'UnionAnalogTable
'UnionFPTable
'
'CSV1    CSV2    CSV3    UNIT    FOLDER  NAME    EU  COMMENT DEC1    DEC2    DEC3    BINALY
'[FUNC]          =IF(A2'="*",D1,fSplit(A2,1,"#"))    =IF(B2'="*",E1,fSplit(B2,1,"#"))    =fSplit(C2,1,"#")   =fSplitBetweenAlter($C2,2,"+EU'=","+C'=")    =fSplit($C2,2,"+C'=")   =fSplitBetweenAlter($C2,2,"DEC:","|","TRUE") =fSplitBetweenAlter($C2,2,"|","|","TRUE")    =IF(fSplit(C2,1,"DEC")'=C2,"",fSplitBetweenAlter($C2,3,"|","+EU",TRUE))  =fReplaceRegx(C2,".*(BIN-?\d+).*","$1")

Sub GetQueryResults(SqlQuery As String, WorkBookName As String, WorkSheetName As String)

    Dim DataFilePath As String
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim ws As Worksheet
    Dim i As Integer
    Dim RowCount As Long, ColCount As Long
    
    'Exit the procedure if no query was passed in
    If SqlQuery = "" Then
            InsertLog ("SQL_ERR, Query string missing, You didn't enter a query")
        Exit Sub
    End If
    
    'Check that the Movies workbook exists in the same folder as this workbook
    DataFilePath = WorkBookName
    
    If Dir(DataFilePath) = "" Then
            InsertLog ("SQL_ERR, File not found, & Dir(DataFilePath")
        Exit Sub
    End If
    
    'Create and open a connection to the Movies workbook
    Set cn = New ADODB.Connection
    cn.ConnectionString = _
        "Provider=Microsoft.ACE.OLEDB.12.0;" & _
        "Data Source=" & DataFilePath & ";" & _
        "Extended Properties='Excel 12.0 Xml;HDR=YES';"
    
    'Try to open the connection, exit the subroutine if this fails
    On Error GoTo EndPoint
    cn.Open
    
    'If anything fails after this point, close the connection before exiting
    On Error GoTo CloseConnection
    
    'Create and populate the recordset using the SQLQuery
    Set rs = New ADODB.Recordset
    rs.ActiveConnection = cn
    rs.CursorType = adOpenStatic
    
    rs.Source = SqlQuery    'Use the query string that we passed into the procedure
    
    'Try to open the recordset to return the results of the query
    rs.Open
    
    'If anything fails after this point, close the recordset and connection before exiting
    On Error GoTo CloseRecordset
    
    'Get count of rows returned by the query
    RowCount = rs.RecordCount
    
    'Debug.Print RowCount & " row(s)", SQLQuery
    
    'Exit the procedure if no rows returned
    If RowCount = 0 Then
            InsertLog ("SQL_ERR, The query returned no results," & Dir(DataFilePath))
    End If
    
    'Get the count of columns returned by the query
    ColCount = rs.Fields.Count
    
    'Create a new worksheet
    'Set ws = ThisWorkbook.Worksheets.Add
    Set ws = ThisWorkbook.Worksheets(WorkSheetName)
    
    'Select the worksheet to avoid the formatting bug with CopyFromRecordset
    Workbooks(Dir(DataFilePath)).Activate
    ws.Select
    ws.Range("A1:XFD" & Rows.Count).Clear
    
    'Format the header row of the worksheet
    With ws.Range("A1").Resize(1, ColCount)
        .Interior.Color = rgbCornflowerBlue
        .Font.Color = rgbWhite
        .Font.Bold = True
    End With
    
    'Copy values from the recordset into the worksheet
    ws.Range("A2").CopyFromRecordset rs
    
    'Write column names into row 1 of the worksheet
    For i = 0 To ColCount - 1
        With rs.Fields(i)
            ws.Range("A1").Offset(0, i).Value = .Name
            
            'Apply a custom date format to date columns
            If .Type = adDate Then
                ws.Range("A1").Offset(1, i).Resize(RowCount, 1).NumberFormat = "dd mmm yyyy"
            End If
        End With
    Next i
    
    'Change the column widths on the worksheet
    ws.Range("A1").CurrentRegion.EntireColumn.AutoFit
    
    'Close the recordset and connection
    'This will happen anyway when the local variables go out of scope at the end of the subroutine
    rs.Close
    cn.Close
    
    'Free resources used by the recordset and connection
    'This will happen anyway when the local variables go out of scope at the end of the subroutine
    Set rs = Nothing
    Set cn = Nothing
    
    'Exit here to make sure that the error handling code does not run
    Exit Sub
    
'========================================================================
'ERROR HANDLERS
'========================================================================
CloseRecordset:
'If the recordset is opened successfully but a runtime error occurs later we end up here
    rs.Close
    cn.Close
    
    Set rs = Nothing
    Set cn = Nothing
    
'    Debug.Print SQLQuery

    InsertLog ("SQL_ERR, An error occurred after the recordset was opened.")
    InsertLog ("Error number: " & Err.Number)
    InsertLog ("Error description: " & Err.Description)
    Exit Sub

CloseConnection:
'If the connection is opened successfully but a runtime error occurs later we end up here
    cn.Close
    
    Set cn = Nothing
    
   ' Debug.Print SQLQuery
    InsertLog ("SQL_ERR, An error occurred after the connection was established.")
    InsertLog ("Error number: " & Err.Number)
    InsertLog ("Error description: " & Err.Description)
    Exit Sub
    
'If the connection failed to open we end up here
EndPoint:
    InsertLog ("SQL_ERR, The connection failed to open.")
    InsertLog ("Error number: " & Err.Number)
    InsertLog ("Error description: " & Err.Description)
            
End Sub



Sub ooo_SQLQUERY_ooo()

End Sub

'
'
'Sub sample_parentasis()
'Dim sSqlQuery As String
'Dim sWbPath As String
'Dim sWbName As String
'Dim sWsName As String
'Dim sWbDBPath As String
'
''sWbDBPath = " 'C:\Users\Owner\Documents\workspace\DFR3_DB_211004.xlsm' 'Excel 12.0 Xml;HDR=YES' "
'
''Out Setting
'sWsName = "SQL_OUT"
'sWbName = ThisWorkbook.Path & "\" & ThisWorkbook.Name
'Call SelectOrAddWs(sWsName, ThisWorkbook.Name)
'
'Dim sTable1 As String
'Dim sHeader1 As String: sHeader1 = "[DEVICE],[COMMENT],[CATEGORY],[FULL_ADR]"
'Dim sWhere1 As String: sWhere1 = "WHERE CATEGORY LIKE '%VB%' "
'
''OK
'sTable1 = _
'        RetQuerySelectFrom(sHeader1 & ",'PLC03_R'", "[DB_PLC03_R$]") & sWhere1 & _
'sTable1 = "SELECT * FROM (" & sTable1 & " ) "
'
''OK
'sTable1 = _
'        RetQuerySelectFrom(sHeader1 & ",'PLC03_R'", "[DB_PLC03_R$]") & sWhere1 & _
'    "UNION ALL " & _
'        RetQuerySelectFrom(sHeader1 & ",'PLC03_M'", "[DB_PLC03_M$]") & sWhere1 & _
'    "UNION ALL " & _
'        RetQuerySelectFrom(sHeader1 & ",'PLC00_R'", "[DB_PLC00_R$]") & sWhere1 & _
'    "UNION ALL " & _
'        RetQuerySelectFrom(sHeader1 & ",'PLC00_M'", "[DB_PLC00_M$]") & sWhere1 & _
'        " "
'sTable1 = "SELECT * FROM (" & sTable1 & " ) WHERE [CATEGORY] = 'VB' "
'
'sTable1 = _
'" (SELECT " & _
'"    [MAIN].[COL1] , [MAIN].[COL2], [OUTER].[COL3] " & _
'" FROM " & _
'"    [TEST_SHT$] AS [MAIN] " & _
'" INNER JOIN " & _
'"   (SELECT [COL1],[COL3] FROM [TEST_OUTER$] )  AS [OUTER] ON [OUTER].[COL1] = [MAIN].[COL1] )" & _
'" UNION ALL " & _
'" (SELECT " & _
'"    [MAIN].[COL1] , [MAIN].[COL2], [OUTER].[COL3] " & _
'" FROM " & _
'"    [TEST_SHT$] AS [MAIN] " & _
'" INNER JOIN " & _
'"(SELECT [COL1],[COL3] FROM [TEST_OUTER$] )  AS [OUTER] ON [OUTER].[COL1] = [MAIN].[COL1] )" & _
'""
'sSqlQuery = sTable1
'
''Run the query with the SQL string
'Call GetQueryResults(sSqlQuery, sWbName, sWsName)
'
'End Sub


Sub ooo_SQL_QUERY_ooo()
End Sub


Sub ExEC_SQL_DEF(inptSel As String, Optional inptWhr As String = "", Optional inptDstSht As String = "", Optional inptFrmSht As String = "")
'ExEC_SQL_DEF "[FILE],[MARK]", "Where MARK NOT IN('')"

Dim sWb As String
Dim sWsDst As String: sWsDst = inptDstSht
Dim sWsFrm As String: sWsFrm = inptFrmSht
Dim sSelect As String: sSelect = inptSel
Dim sWhere As String: sWhere = inptWhr

If inptFrmSht = "" Then sWsFrm = "MAIN"
If inptDstSht = "" Then sWsDst = "SQLOUT"
sWb = ThisWorkbook.Path & "\" & ThisWorkbook.Name

'sSelect = "[FILE],[MARK],[STATUS],[LABEL],[LINE],[C1],[C2],[C3],[C4]"

'sWhere = "Where MARK NOT IN('')"
'sWhere = "Where MARK NOT IN('M1')"

ExEC_SQL sWb, sWsDst, sWsFrm, sSelect, sWhere

End Sub


Sub ExEC_SQL(inptWb As String, inptOutSht As String, inptFrmSht As String, inptSel As String, Optional inptWhr As String = "")
Dim sSqlQuery As String
'Dim sWbPath As String: sWbPath = inptWbPath
Dim sWb As String: sWb = inptWb
Dim sWsDst As String: sWsDst = inptOutSht
'Dim sWbDBPath As String
Dim sSelect As String: sSelect = inptSel
Dim sWsFrm As String: sWsFrm = inptFrmSht
Dim sWhere As String: sWhere = inptWhr
Dim sSql As String
'sWbDBPath = " 'C:\Users\Owner\Documents\workspace\DFR3_DB_211004.xlsm' 'Excel 12.0 Xml;HDR=YES' "

'sSelect = "[FILE],[MARK],[STATUS],[LABEL],[LINE],[C1],[C2],[C3],[C4]"
sWsFrm = "[" & sWsFrm & "$]"

Application.ScreenUpdating = False

With SelectOrCreateWs(sWsDst, ThisWorkbook.Name)
    .Cells.Clear
End With

'Dim sHeader1 As String: sHeader1 = "[DEVICE],[COMMENT],[CATEGORY],[FULL_ADR]"
'sTable1 = _
'" (SELECT " & _
'"    [MAIN].[COL1] , [MAIN].[COL2], [OUTER].[COL3] " & _
'" FROM " & _
'"    [TEST_SHT$] AS [MAIN] " & _
'" INNER JOIN " & _
'"   (SELECT [COL1],[COL3] FROM [TEST_OUTER$] )  AS [OUTER] ON [OUTER].[COL1] = [MAIN].[COL1] )" & _
'" UNION ALL " & _
'" (SELECT " & _
'"    [MAIN].[COL1] , [MAIN].[COL2], [OUTER].[COL3] " & _
'" FROM " & _
'"    [TEST_SHT$] AS [MAIN] " & _
'" INNER JOIN " & _
'"(SELECT [COL1],[COL3] FROM [TEST_OUTER$] )  AS [OUTER] ON [OUTER].[COL1] = [MAIN].[COL1] )" & _
'""

'ALL
'sWhere = "LEFT([LABEL], 1) = '【'"

'FNC/SQL
'sWhere = "LEFT([LABEL], 4) = '【FNC'" & _
    " OR " & _
        "LEFT([LABEL], 4) = '【SQL'"

'NOT
'sWhere = "LEFT([LABEL], 4) = '【FNC'" & _
           " OR " & _
        "LEFT([LABEL], 4) = '【SQL'"
        
sSql = _
    " SELECT " & _
        sSelect & _
    " FROM " & _
        sWsFrm

If sWhere <> "" Then
    sSql = sSql & " " & sWhere
End If


sSql = "select [FILE],[MARK],[LABEL] From [DOWNLOAD$] WHERE MARK IN('●') OR LABEL NOT IN('')"


sSqlQuery = sSql

'Run the query with the SQL string
Call GetQueryResults(sSqlQuery, sWb, sWsDst)

Application.ScreenUpdating = True

End Sub



Sub EXEC_SQL_QUERY(inptSql As String, Optional inptOutSht As String = "SQL_OUT")
Dim sWb As String: sWb = ThisWorkbook.Path & "\" & ThisWorkbook.Name
Dim sWsDst As String: sWsDst = inptOutSht
Dim sSql As String: sSql = inptSql
Dim sSqlQuery As String
'sWbDBPath = " 'C:\Users\Owner\Documents\workspace\DFR3_DB_211004.xlsm' 'Excel 12.0 Xml;HDR=YES' "

'sSql = "select [FILE],[MARK],[LABEL] From [DOWNLOAD$] WHERE MARK IN('●') OR LABEL NOT IN('')"

Application.ScreenUpdating = False

With SelectOrCreateWs(sWsDst, Dir(sWb))
    .Cells.Clear
End With

v = "select [FILE],[MARK],[LABEL] From [DOWNLOAD$] "
v = v & " WHERE [MARK] in('●')"
v = v & " or LEFT([LABEL], 1) = '['"
EXEC_SQL_QUERY (v)

sSqlQuery = sSql

'Run the query with the SQL string
Call GetQueryResults(sSqlQuery, sWb, sWsDst)

Application.ScreenUpdating = True

End Sub


'EXEC_SQL_QUERY "select [FILE],[MARK],[LABEL] From [DOWNLOAD$] WHERE mark in('●') or label not in('')"

