

Type tStack

    outPutRow As Long
    crrFncName As String
    sqlCnt As Long 'Execute

End Type


Type tIndexedtext

    index As String
    line As String
    fileName As String

End Type


Sub clearImmediate()

Debug.Print String(1000, vbLf)

End Sub


Function fReadAllText(inptFilePath As String) As String

With CreateObject("Scripting.FileSystemObject").GetFile(inptFilePath).OpenAsTextStream
    fReadAllText = .readall
End With

End Function


Function fCreatePrjFncList(inptFolderPath As String) As String
Dim vFile As Variant
Dim sFolder As String: sFolder = inptFolderPath
Dim sLine As String
Dim sResult As String

'MAKE FUNCTION NAME LIST
For Each vFile In fGetFilePathInFolder(sFolder) 'Folder path("C:\ANY") : string  =>  File list : object

    With CreateObject("Scripting.FileSystemObject").OpenTextFile(CStr(vFile))
            
            Do While .AtEndOfStream <> True
            
                sLine = CStr(.readline)
                
                'regx match
                If fRegxTest(sLine, fKey2Val("LS_BC", "RGX_FNCNAME")) Then
                    
                    sResult = WorksheetFunction.TextJoin("|" _
                                                                                    , True _
                                                                                    , fRegxFirstMatch(sLine, fKey2Val("LS_BC", "RGX_FNCNAME"), 1) _
                                                                                    , sResult)

                End If
                
            Loop 'read sLine
            
    .Close
    End With 'open file
    
Next vFile

'!YET if duplicate function name
fCreatePrjFncList = sResult

End Function



Sub DownloadObjectFileList()
Dim vFile As Variant
Dim sFolder As String: sFolder = fKey2Val("LS_BC", "PRG_GET_FOLDER")
Dim sLine As String
Dim sResult As String

With SelectOrCreateWs("OBJ_LIST")
    .Cells.Clear
End With


'MAKE FUNCTION NAME LIST
For Each vFile In fGetFilePathInFolder(sFolder) 'Folder path("C:\ANY") : string  =>  File list : object

        With SelectOrCreateWs("OBJ_LIST")
            .Cells(Cells(Rows.Count, 1).End(xlUp).row + 1, 1).Value = Dir(CStr(vFile))
        End With
    
Next vFile

End Sub



Sub DownloadObjList(inptMatchType As String) 'get hole text
Dim vFile As Variant
Dim sFolder As String: sFolder = fKey2Val("LS_BC", "PRG_GET_FOLDER")
Dim sText As String
Dim lCnt As Long: lCnt = 1 'total line count
Dim lIndex As Long 'temp index
Dim lRow As Long: lRow = 2 'workshetsheet row
Dim oMatchs As Object
Dim oMatch As Object
Dim oArr As Object: Set oArr = CreateObject("System.Collections.ArrayList")
Dim sLine As String
Dim slineTmp As String
Dim sMatchPtn As String
Dim sMutePtn As String:
Dim sthOBJDTL As Worksheet
Dim sFncNames As String
Dim tStack As tStack

' >> Get Regx Pattern

'RegxPattern Match
Select Case inptMatchType
    Case "FNC"
        sMatchPtn = CStr(fKey2Val("LS_BC", "PRG_GET_MATCHPTN_FNC"))
        Set shtOBJDTL = SelectOrCreateWs("OBJ_FNC")
    Case "DTL"
        sMatchPtn = CStr(fKey2Val("LS_BC", "PRG_GET_MATCHPTN"))
        Set shtOBJDTL = SelectOrCreateWs("OBJ_DTL")
    Case Else
        printLog ("inptMatchType is FNC or DTL only")
End Select

shtOBJDTL.Cells.Clear

'RegxPattern Mute
sMutePtn = CStr(fKey2Val("LS_BC", "PRG_GET_MUTEPTN")): If sMutePtn = "" Then sMutePtn = "====================DMY_PTN======================"
'RegxPattern (Sub|Func|Property) List                'YET \\_ <- ??
sFncNames = fReplace(fCreatePrjFncList(sFolder), _
                                    "_", _
                                    "\_")

' >> OUTPUT ON SHEET

For Each vFile In fGetFilePathInFolder(sFolder) 'Folder path("C:\ANY") : string  =>  File list : object

    With CreateObject("Scripting.FileSystemObject").OpenTextFile(CStr(vFile))
            
            Do While .AtEndOfStream <> True
                       
                       
                ' >> make lIndex sline, replace splited
                
                sLine = CStr(.readline)
                
                'Join split lines
                If Right(sLine, 2) = " _" Then
                 'splited
                 
                     lIndex = lCnt
                     slineTmp = sLine
                    
                    Do
                        sLine = CStr(.readline)
                        slineTmp = slineTmp & sLine
                         lCnt = lCnt + 1
                    Loop While Right(sLine, 2) = " _"
                    
                    sLine = slineTmp
                    sLine = fReplaceRegx(sLine, fKey2Val("LS_BC", "RGX_VBATRIMN"), " ", True) & vbLf  'replace _ \n
                    slineTmp = ""
                      
               Else
               'not
               
                    lIndex = lCnt
                    sLine = sLine
                  
                End If
                
            
                ' >> regx match
                
                'out put line
                With shtOBJDTL
                    
                'RegxPatterns
                If fRegxTest(sLine, sMatchPtn) _
                    And Not fRegxTest(sLine, sMutePtn) _
                    Or fRegxTest(sLine, sFncNames) _
                Then
                
                        'Output line , RegxPatterns1,2
                        .Cells(lRow, fCol("A")).Value = lIndex
                        .Cells(lRow, fCol("B")).Value = sLine
                        .Cells(lRow, fCol("C")).Value = Dir(CStr(vFile))
                        .Cells(lRow, fCol("D")).Value = fKey2Val("GET_FILETYPE", Dir(CStr(vFile)))
                        .Cells(lRow, fCol("E")).Value = Dir(CStr(vFile)) & "-" & lCnt  'Uniq Key
                    
                        '>>
                    
                        'Set fnc
                        If fRegxFirstMatch(sLine, _
                                                        fKey2Val("LS_BC", "RGX_FNCNAME")) <> "#VALUE!" Then
                            tStack.crrFncName = fRegxFirstMatch(sLine, fKey2Val("LS_BC", "RGX_FNCNAME"), 1)
                            tStack.outPutRow = lRow
                            tStack.sqlCnt = 0 'clng(tStack.sqlCnt) + 1
                            
                            .Cells(lRow, fCol("F")).Value = tStack.crrFncName & tStack.outPutRow & tStack.sqlCnt
                        
                        End If
                        
                        'SQL Execute
                        If fRegxFirstMatch(sLine, ".\Execute") <> "#VALUE!" Then
                            .Cells(lRow, fCol("G")).Value = sLine
                        End If
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        '<<
                        
                    
                    'next row
                    lRow = lRow + 1
                
                End If
            
                'next line
                lCnt = lCnt + 1
                    
                    
'               'REGX IN sLine
'
'                Debug.Print sLine
'                If fRegxTest(sLine, sMatchPtn) Then Debug.Print "true"

            End With 'Sheet

            Loop 'PER sLine
                
     .Close
    End With 'ReadObj

    
    'stack=======================

    lCnt = 1

Next vFile


'
''Function fRegxMatchs(ByVal inptStr As String, ByVal inptPattern As String, Optional inptGlobal As Boolean = False) As Object
'Set oMatchs = fRegxMatchs(sText, sMatchPtn)
'
'If oMatchs Is Nothing Then Debug.Print "REGX NOT MATCH": Exit Sub
'
'For Each oMatch In oMatchs
'
'    With oMatch
'        'Regx
'        'Function fRegxTest(ByVal inptStr As String, ByVal inptPattern As String) As Boolean
'
'
''       If Not fRegxTest(.Value, sMutePtn) Then
''
''        End If
'
'        'clean up
'        'Debug.Print ReplaceRegx(.Value, "\(?\s_[\s\r]+\)?", " ", True)f
'
'    End With
'CONTINUE:
'Next oMatch


End Sub


'==================================================================================================

'Files in single Folder

'==================================================================================================

Function fGetFilePathInFolder(inptFolderPath As String) As Object ' Folder path("C:\ANY") : string  =>  File list : object
' return value usage // oArr(n) -> string, oArr.count
' not include folder, file type only

Dim oFSO As Object
Dim oFolder As Object
Dim oFile As Object: Set oFSO = CreateObject("Scripting.FileSystemObject")
Dim sFolder As String: sFolder = inptFolderPath: Set oFolder = oFSO.getFolder(sFolder)
Dim oArr As Object: Set oArr = CreateObject("System.Collections.ArrayList")
Dim i As Integer

For Each oFile In oFolder.Files

    oArr.Add oFile.Path
   ' oFile.Name -> d20211101_mod_DbgXml.bas
   ' oFile.Path -> C:\Users\admin\Documents\tsk\d20211101_mod_DbgXml.bas
    
    i = i + 1

Next oFile

Set fGetFilePathInFolder = oArr

Set oFSO = Nothing
Set oFolder = Nothing
Set oFile = Nothing
Set oArr = Nothing

End Function




'==================================================================================================

'file IO
'file path to text

'==================================================================================================


'
'Function fFilePath2IndexedText(inptFilePath As String, inptDelimiter As String) As Variant
'
'            'file path : string => Lines : variant(tIndexedText)
'
'Dim sFilePath As String: sFilePath = inptFilePath
'Dim sDelimiter As String: sDelimiter = inptDelimiter
'Dim vLines() As tIndexedtext
'            Dim sText As String
'Dim sIndex As String: sIndex = 1
'
'Open sFilePath For Input As #1
'
'    Do Until EOF(1)
'        Line Input #1, sLine
'
'        ReDim vLines(sIndex)
'
'        With vLines(sIndex - 1)
'            .index = slindex
'            .line = sLine
'            .fileName = Dir(sFilePath)
'         End With
''                            sText = sText & Format(sIndex, "0000") & " _:_ "
''                            sText = sText & sLine & vbLf
'    Loop
'
'Close #1
'
'Stop
'
''fFilePath2IndexedText = vLines
'
'End Function

                    



'wait to adding ============================================================


Function fSwith(inptExp As String)
'memo
'Evaluate("left(""ABC"",1)")
'Switch("exp","rslt1","rtn1")
'?  Switch( 0 = 0 , "0", 1=1, "1") -> 0

End Function



Function fCol(inptCol As String) As Long

fCol = Columns(inptCol).Column

End Function



Sub FillWsFunction_OBJLIST()

Dim i As Long: i = 2
Dim shtOBJLST: shtOBJLST = "OBJ_LIST"

    Do Until Sheets(shtOBJLST).Cells(i, fCol("A")).Value = ""
    
     With Sheets(shtOBJLST)
                
            .Cells(i, fCol("C")).Value = fRegxFirstMatch(.Cells(i, fCol("A")).Value, "[\d\w]+\.(bas|form|cls)")

             i = i + 1
             
        End With
        
    Loop
    
End Sub



Function retThisWbName() As String
    retThisWbName = ThisWorkbook.Name
End Function



Function fRegxTest(ByVal inptStr As String, ByVal inptPattern As String) As Boolean

    With CreateObject("VBScript.RegExp")
        
        .Global = True
        .MultiLine = True
        .ignorecase = True
        .Pattern = inptPattern
    
        If .test(inptStr) Then
            fRegxTest = True
        Else
            fRegxTest = False
        End If
    
    End With
    
End Function



Function fRegxFirstMatch(ByVal inptStr As String, _
                                       ByVal inptPattern As String, _
                                       Optional inptSub As String = "") As String
'? fRegxFirstMatch("2023/01/07  01:35            51,209 d20211101_mod_DbgXml.bas", "[\d\w]+\.(bas|form)")
'd20211101_mod_DbgXml.bas

If fRegxMatchs(inptStr, inptPattern) Is Nothing Then
    fRegxFirstMatch = "#VALUE!"
Else
    'mutch or submatch
    If inptSub = "" Then
        fRegxFirstMatch = fRegxMatchs(inptStr, _
                                                        inptPattern)(0)
    Else
        fRegxFirstMatch = fRegxMatchs(inptStr, _
                                                        inptPattern)(0).submatches(CLng(inptSub))
    End If
End If

End Function



Sub printLog(inptStr As String, Optional inptFile As String = "")
Dim sPath As String
Dim sStr As String
sPath = ThisWorkbook.Path & "\" & Switch(inptFile = "", "vbaLog.txt", inptFile <> "", inptFile)

sStr = CStr(Now()) & " : " & inptStr

With CreateObject("Scripting.FileSystemObject")

    If Dir(sPath) <> "" Then
    
'        With .OpenTextFile(sPath, ForAppending)
'            .Write sStr & vbLf
'        End With

        Open sPath For Append As #1
        Print #1, sStr
        Close #1
    
    Else
    
        With .CreaTetextFile(sPath)
            .Write sStr & vbLf
        End With
        
    End If

End With

End Sub



Function SelectOrCreateWs(inptShtName As String, Optional inptWb As String = "") As Worksheet
Dim sSht As String: sSht = inptShtName
Dim sWb As Workbook: If inptWb = "" Then Set sWb = ThisWorkbook Else Set sWb = Workbooks(inptWb)
Dim s As Worksheet
Dim sht As Worksheet

'YET
'If shtOBJDTL Is Nothing Then printLog ("[FAIL] does not find worksheet, be sure that window frame is only single"): Exit Sub

If sSht = "" Then printLog ("Sheet Name Is Empty"): Exit Function
'If Not sWb = ThisWorkbook.Name Then printLog ("External Workbook : SelectOrAddWs")

For Each s In sWb.Sheets
    If s.Name = sSht Then
        printLog ("Select Sheet " & sSht)
        Set SelectOrCreateWs = sWb.Sheets(sSht)
        Exit Function
    End If
Next s

With sWb.Worksheets.Add
    printLog ("Create New Sheet " & sSht)
    .Name = sSht
        Set sht = sWb.Sheets(sSht)
End With

Set SelectOrCreateWs = sht

End Function




'==================================================================================================

'regural expression

'==================================================================================================


Function fRegxMatch(ByVal inptStr As String, _
                                  ByVal inptPattern As String, _
                                  Optional inptIndex As Long = 0, _
                                  Optional inptErrMsg As String = "#VALUE!") As String
'[usage] named parameter
'Print fRegxMatch("ABCDE1234", "XYZ", inptErrMsg:="Oooops!")
'Oooops!

If fRegxMatchs(inptStr, inptPattern) Is Nothing Then
    fRegxMatch = inptErrMsg
Else
    fRegxMatch = fRegxMatchs(inptStr, inptPattern)(inptIndex)
End If

End Function



Function fRegxMatchs(ByVal inptStr As String, _
                                  ByVal inptPattern As String, _
                                  Optional ByVal inptG As String = True, _
                                  Optional ByVal inptM As String = True, _
                                  Optional ByVal inptI As String = True) As Object
'oMatch(0...).Value
'Optinal Global -> If True, then all the matches of the pattern in the string are found.
'                           If False then only the first match is found.

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim oMatchs As Object

    With regx
        
        .Global = True
        .MultiLine = True
        .ignorecase = True
        .Pattern = inptPattern
    
    End With

If regx.test(inptStr) Then

    Set oMatchs = regx.Execute(inptStr)

End If

Set fRegxMatchs = oMatchs

Set oMatchs = Nothing

End Function



'return match ...
Function fReplace(ByVal inptStr As String, ByVal inptSearch As String, ByVal inptReplace As String) As String
    fReplace = Replace(inptStr, inptSearch, inptReplace)
End Function


Function fReplaceRegx(ByVal inptStr As String, ByVal inptPattern As String, ByVal inptReplace As String, Optional inptGlobal As Boolean = False) As String
'(group) => $n~

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
    With regx
        .Global = inptGlobal 'isMultiple
        .MultiLine = True
        .ignorecase = True
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    fReplaceRegx = regx.Replace(inptStr, inptReplace)
End If

End Function




'==================================================================================================

'get value

'==================================================================================================



'値の取得""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Function fKey2Val(inptLabel As String, _
                            inptKey As String, _
                            Optional inptErrMsg As String = "#VALUE!", _
                            Optional inptSht As String = "LinkSht") As String
                            
'[usage] named parameter
'Print fRegxMatch("ABCDE1234", "XYZ", inptErrMsg:="Oooops!")
'Oooops!

Dim sLabel As String: sLabel = inptLabel
Dim sKey As String: sKey = inptKey
Dim sData As Variant
Dim sResult As Variant
Dim sShtName As String: sShtName = inptSht
Dim rRng As Range: Set rRng = ThisWorkbook.Sheets(sShtName).Rows(1)
Dim lIndex As Long
Dim bMatch As Boolean
Dim sErrMsg As String: sErrMsg = inptErrMsg

'検索シートの指定列から検索キーと一致した行の配列データを取得
sData = fGetRowData(ThisWorkbook.Name, rRng.Worksheet.Name, sLabel, "A")

'検索キーとの一致なし
If UBound(sData) = -1 Then
    Call printLog("fGetRowData fail : " & inptLabel & " " & inptKey & " " & inptSht)
    fKey2Val = sErrMsg: Exit Function
End If

'行から必要なパラメーターを取り出し
Dim sWb As String: sWb = sData(2)
Dim sWs As String: sWs = sData(3)
Dim sKeyCol As String: sKeyCol = WorksheetFunction.Trim(sData(4))
Dim sRtnCol As String: sRtnCol = WorksheetFunction.Trim(sData(5))

'エラー出力
If sWb = "" Or sWb = sErrMsg Then Call printLog("sWb : " & sWb)
If sWs = "" Or sWs = sErrMsg Then Call printLog("sWs : " & sWs)
If sKeyCol = "" Or sKeyCol = sErrMsg Then Call printLog("sKeyCol : " & sKeyCol)
If sRtnCol = "" Or sRtnCol = sErrMsg Then Call printLog("sRtnCol : " & sRtnCol)


sResult = fGetCellData(sWb, sWs, sKey, sKeyCol, sRtnCol)

fKey2Val = sResult

End Function


'検索キーからセルデータを取得する""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Private Function fGetCellData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String, inptTargetCol As String) As String

Dim sWbName As String: sWbName = inptWb
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim sRslt As String
On Error Resume Next

With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then
        Call printLog(">>FAIL : fGetCellData " & vbNewLine & _
                                        "InptKey : " & inptKey & vbNewLine & _
                                         "WbName : " & sWbName & vbNewLine & _
                                         "WsName : " & sWsName)
        fGetCellData = "#N/A#": Exit Function
    End If
    
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rColKey, 0)
    If sMatchRow <> "" Then
        sRslt = .Cells(CLng(sMatchRow), sTargetCol).Value
    Else
        sRslt = "#N/A#"
    End If
End With

fGetCellData = sRslt

End Function



'検索キーから行データを取得する""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Function fGetRowData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String) As Variant

Dim sWbName As String: sWbName = inptWb
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
'Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim vRslt As Variant

On Error Resume Next
With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then fGetRowData = Array()
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow <> "" Then
            vRslt = Application.Transpose(Application.Transpose(.Rows(CLng(sMatchRow)).Value))
        Else
            vRslt = Array()
    End If

End With

fGetRowData = vRslt

End Function


Function fSplit(ByVal inptStr As String, ByVal inptCol As Integer, Optional ByVal inptSplt As String = ",", Optional inptMatch As Boolean = False) As String
Dim sStr As String: sStr = inptStr
Dim lCol As Integer: lCol = inptCol
Dim sSplt As String: sSplt = inptSplt
Dim sRslt As String
Dim aStr() As String

aStr = Split(sStr, sSplt)

If UBound(aStr) = -1 Or UBound(aStr) = 0 Or lCol = 0 Then
    sRslt = sStr
ElseIf lCol > UBound(aStr) + 1 Then
    sRslt = sStr
ElseIf lCol < 0 Then
    sRslt = aStr(UBound(aStr) + 1 + lCol)
Else
    sRslt = aStr(lCol - 1)
End If


If inptMatch = True And sRslt = inptStr Then sRslt = ""

fSplit = sRslt

End Function


Function fIndent(inptPref As String, inptTxt As String, inptSt As Long) As String

'If inptSt - Len(inptPref) < 0 Then
'    fIndent = inptPref & " " & inptTxt
'ElseIf inptPref = "" Then
'    fIndent = Application.WorksheetFunction.Rept(" ", inptSt) & " " & inptTxt
'Else
'    fIndent = inptPref _
'              & " " & _
'             Application.WorksheetFunction.Rept(" ", inptSt - Len(inptPref)) & inptTxt
'End If

fIndent = inptPref _
               & " " & _
              Application.WorksheetFunction.Rept(" ", inptSt) & inptTxt

End Function

