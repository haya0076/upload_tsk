
'==================================================================================================

'regural expression

'==================================================================================================


Function fRegxMatchs(ByVal inptStr As String, ByVal inptPattern As String) As Object
'oMatch(0...).Value
'Optinal Global -> If True, then all the matches of the pattern in the string are found.
'                           If False then only the first match is found.

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim oMatchs As Object

    With regx
        
        .Global = True
        .MultiLine = True
        .ignorecase = False
        .Pattern = inptPattern
    
    End With

If regx.test(inptStr) Then

    Set oMatchs = regx.Execute(inptStr)

End If

Set fRegxMatchs = oMatchs

Set oMatchs = Nothing

End Function



Function fRegxTest(ByVal inptStr As String, ByVal inptPattern As String) As Boolean

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
Dim bResult As Boolean

    With regx
        .Global = True
        .MultiLine = True
        .ignorecase = False
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    bResult = True
Else
    bResult = False
End If

fRegxTest = bResult

End Function


'return match ...
Function fReplace(ByVal inptStr As String, ByVal inptSearch As String, ByVal inptReplace As String) As String
    fReplace = Replace(inptStr, inptSearch, inptReplace)
End Function


Function fReplaceRegx(ByVal inptStr As String, ByVal inptPattern As String, ByVal inptReplace As String, Optional inptGlobal As Boolean = False) As String
'(group) => $n~

Dim regx As Object: Set regx = CreateObject("vbscript.regexp")
    With regx
        .Global = inptGlobal 'isMultiple
        .MultiLine = True
        .ignorecase = False
        .Pattern = inptPattern
    End With

If regx.test(inptStr) Then
    fReplaceRegx = regx.Replace(inptStr, inptReplace)
End If

End Function




'==================================================================================================

'get value

'==================================================================================================



'値の取得""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Function fKey2Val(inptLabel As String, inptKey As String, Optional inptSht As String = "LinkSht") As String
Dim sLabel As String: sLabel = inptLabel
Dim sKey As String: sKey = inptKey
Dim sData As Variant
Dim sResult As Variant
Dim sShtName As String: sShtName = inptSht
Dim rRng As Range: Set rRng = ThisWorkbook.Sheets(sShtName).Rows(1)
Dim lIndex As Long
Dim bMatch As Boolean


'検索シートの指定列から検索キーと一致した行の配列データを取得
sData = fGetRowData(ThisWorkbook.Name, rRng.Worksheet.Name, sLabel, "A")

'検索キーとの一致なし
If UBound(sData) = -1 Then
    Call DebugOut("ERR", "fGetRowData fail : " & inptLabel & " " & inptKey & " " & inptSht)
    fKey2Val = "#N/A#": Exit Function
End If

'行から必要なパラメーターを取り出し
Dim sWb As String: sWb = sData(2)
Dim sWs As String: sWs = sData(3)
Dim sKeyCol As String: sKeyCol = WorksheetFunction.Trim(sData(4))
Dim sRtnCol As String: sRtnCol = WorksheetFunction.Trim(sData(5))

'エラー出力
If sWb = "" Or sWb = "#N/A#" Then Call DebugOut("ERR", "sWb : " & sWb)
If sWs = "" Or sWs = "#N/A#" Then Call DebugOut("ERR", "sWs : " & sWs)
If sKeyCol = "" Or sKeyCol = "#N/A#" Then Call DebugOut("ERR", "sKeyCol : " & sKeyCol)
If sRtnCol = "" Or sRtnCol = "#N/A#" Then Call DebugOut("ERR", "sRtnCol : " & sRtnCol)


sResult = fGetCellData(sWb, sWs, sKey, sKeyCol, sRtnCol)

fKey2Val = sResult

End Function


'検索キーからセルデータを取得する""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Private Function fGetCellData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String, inptTargetCol As String) As String

Dim sWbName As String: sWbName = inptWb
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim sRslt As String
On Error Resume Next

With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then
        Call DebugOut("ERR", ">>FAIL : fGetCellData " & vbNewLine & _
                                        "InptKey : " & inptKey & vbNewLine & _
                                         "WbName : " & sWbName & vbNewLine & _
                                         "WsName : " & sWsName)
        fGetCellData = "#N/A#": Exit Function
    End If
    
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow = "" Then sMatchRow = Application.WorksheetFunction.Match(CLng(sKey), rColKey, 0)
    If sMatchRow <> "" Then
        sRslt = .Cells(CLng(sMatchRow), sTargetCol).Value
    Else
        sRslt = "#N/A#"
    End If
End With

fGetCellData = sRslt

End Function



'検索キーから行データを取得する""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Function fGetRowData(inptWb As String, inptWs As String, inptKey As String, inptKeyCol As String) As Variant

Dim sWbName As String: sWbName = inptWb
Dim sWsName As String: sWsName = inptWs
Dim sKeyCol As String: sKeyCol = inptKeyCol
Dim sKey As String: sKey = inptKey
'Dim sTargetCol As String: sTargetCol = inptTargetCol
Dim sMatchRow As String
Dim vRslt As Variant

On Error Resume Next
With Workbooks(sWbName).Worksheets(sWsName)

    Dim rColKey As Range
    Set rColKey = .Columns(.Cells.Columns(sKeyCol).Column)
    If rColKey Is Nothing Then fGetRowData = Array()
    sMatchRow = Application.WorksheetFunction.Match(sKey, rColKey, 0)
    If sMatchRow <> "" Then
            vRslt = Application.Transpose(Application.Transpose(.Rows(CLng(sMatchRow)).Value))
        Else
            vRslt = Array()
    End If

End With

fGetRowData = vRslt

End Function


